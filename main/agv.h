// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file agv.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _agv_H_
#define _agv_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <stdbool.h>

/*!
 * @brief This struct represents the structure OIE_Time defined by the user in the IDL file.
 * @ingroup agv
 */
typedef struct OIE_Time
{
    int32_t sec;
    uint32_t nanosec;
} OIE_Time;

struct ucdrBuffer;

bool OIE_Time_serialize_topic(struct ucdrBuffer* writer, const OIE_Time* topic);
bool OIE_Time_deserialize_topic(struct ucdrBuffer* reader, OIE_Time* topic);
uint32_t OIE_Time_size_of_topic(const OIE_Time* topic, uint32_t size);

/*!
 * @brief This struct represents the structure Distance defined by the user in the IDL file.
 * @ingroup agv
 */
typedef struct Distance
{
    char publicName[255];

    char system[255];

    uint32_t quality;
    OIE_Time timeStamp;
    int32_t angle;
    double distance;
} Distance;

struct ucdrBuffer;

bool Distance_serialize_topic(struct ucdrBuffer* writer, const Distance* topic);
bool Distance_deserialize_topic(struct ucdrBuffer* reader, Distance* topic);
uint32_t Distance_size_of_topic(const Distance* topic, uint32_t size);

/*!
 * @brief This struct represents the structure TrackSpeed defined by the user in the IDL file.
 * @ingroup agv
 */
typedef struct TrackSpeed
{
    char publicName[255];

    char system[255];

    uint32_t quality;
    OIE_Time timeStamp;
    double speedPercent;
} TrackSpeed;

struct ucdrBuffer;

bool TrackSpeed_serialize_topic(struct ucdrBuffer* writer, const TrackSpeed* topic);
bool TrackSpeed_deserialize_topic(struct ucdrBuffer* reader, TrackSpeed* topic);
uint32_t TrackSpeed_size_of_topic(const TrackSpeed* topic, uint32_t size);

#ifdef __cplusplus
}
#endif

#endif // _agv_H_